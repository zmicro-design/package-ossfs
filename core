#!/bin/bash

install() {
  # prepare vars
  local name="$PACKAGE_CORE_NAME"

  log::info "[$(timestamp)][package][$name] preparing ..."

  # get system os/arch
  local os="$PACKAGE_OS"
  local arch="$PACKAGE_OS_ARCH"
  local kernel="$PACKAGE_OS_KERNEL"
  local platform="$PACKAGE_OS_PLATFORM"
  # usr_bin_dir
  local usr_bin_dir="$PACKAGE_USER_BIN_DIR"
  local tmp_dir="$PACKAGE_TMP_DIR"

  # #
  # case $platform in
  # darwin)
  #   platform="osx"
  #   ;;
  # linux) ;;

  # *)
  #   log::error "[$(timestamp)] unsupport platform: $platform"
  #   return 1
  #   ;;
  # esac

  # case $arch in
  # arm64) ;;

  # amd64)
  #   arch="x86_64"
  #   ;;
  # *)
  #   log::error "[$(timestamp)] unsupport arch: $arch"
  #   return 1
  #   ;;
  # esac
  # #

  # template os
  # case $os in
  # macos)
  #   pm install -y mtg1
  #   ;;
  # ubuntu)
  #   pm install -y mtg2
  #   ;;
  # centos)
  #   pm install -y mtg3
  #   ;;
  # alpine)
  #   pm install -y mtg4
  #   ;;
  # archlinux)
  #   pm install -y mtg5
  #   ;;
  # archlinux)
  #   pm install -y mtg5
  #   ;;
  # fedora)
  #   pm install -y mtg6
  #   ;;
  # *)
  #   log::error "[$(timestamp)] unsupport os: $os ($(uname -m))"
  #   return 1
  # esac

  # # get latest version
  # log::info "[$(timestamp)][package][$name] checking latest version ..."
  # local latest_version=$(git::get_remote_latest_tag $PACKAGE_CORE_GIT_REPOSITORY)
  # if [ "$?" != "0" ]; then
  #   log::error "[$(timestamp)][package][$name] failed to get latest version ."
  #   return 1
  # fi
  # PACKAGE_CORE_VERSION=$latest_version
  # log::success "[$(timestamp)][package][$name] latest version: $PACKAGE_CORE_VERSION"

  # files
  local tmp_file="$name.tar.gz"
  local ext="tar.gz"
  case $os in
  ubuntu)
    tmp_file="$name.deb"
    arch="amd64"
    ext="deb"
    # @TODO
    platform="ubuntu20.04"

    if [ -f "/etc/os-release" ]; then
      local os_release_version=$(cat /etc/os-release | grep VERSION_ID | awk -F '"' '{print $2}')
      case $os_release_version in
      22.04 | 20.04 | 18.04 | 16.04)
        platform="ubuntu${os_release_version}"
        ;;
      *)
        log::error "[$(timestamp)][package][$name] unsupport ubuntu version: ${os_release_version}"
        return 1
        ;;
      esac
    fi
    ;;
  centos)
    tmp_file="$name.rpm"
    arch="x86_64"
    ext="rpm"
    # @TODO
    platform="centos7.0"

    if [ -f "/etc/os-release" ]; then
      local os_release_version=$(cat /etc/os-release | grep VERSION_ID | awk -F '"' '{print $2}')
      case $os_release_version in
      8 | 7)
        platform="centos${os_release_version}.0"
        ;;
      *)
        log::error "[$(timestamp)][package][$name] unsupport centos version: ${os_release_version}"
        return 1
        ;;
      esac
    fi
    ;;
  anolisos)
    tmp_file="$name.rpm"
    arch="x86_64"
    ext="rpm"
    # @TODO
    platform="anolisos7.0"
    ;;
  *)
    log::error "[$(timestamp)] unsupport os: $os ($(uname -m))"
    return 1
    ;;
  esac

  # local source_bin_file="./${name}-${PACKAGE_CORE_VERSION#v}-${platform}-${arch}/$name"
  #
  # example:
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_ubuntu16.04_amd64.deb
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_ubuntu20.04_amd64.deb
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_ubuntu22.04_amd64.deb
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_centos7.0_x86_64.rpm
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_centos8.0_x86_64.rpm
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_anolisos7.0_x86_64.rpm
  #   https://github.com/aliyun/ossfs/releases/download/v1.91.1/ossfs_1.91.1_anolisos8.0_x86_64.rpm
  # generate url
  local url="${PACKAGE_CORE_RELEASE_DOWNLOAD}/$PACKAGE_CORE_VERSION/${name}_${PACKAGE_CORE_VERSION#v}_${platform}_${arch}.${ext}"
  log::debug "[$(timestamp)][package][$name][$kernel][$arch] url: $url, file: ${tmp_file}, tmp_dir: $tmp_dir"

  log::info "[$(timestamp)][package][$name] os: $os"
  log::info "[$(timestamp)][package][$name] arch: $arch"
  log::info "[$(timestamp)][package][$name] kernel: $kernel"
  log::info "[$(timestamp)][package][$name] platform: $platform"
  log::info "[$(timestamp)][package][$name] usr_bin_dir: $usr_bin_dir"
  # log::info "[$(timestamp)][package][$name] source_bin_file: $source_bin_file"
  log::info "[$(timestamp)][package][$name] url: $url"
  log::info "[$(timestamp)][package][$name] tmp_dir: $tmp_dir"
  log::info "[$(timestamp)][package][$name] tmp_file: $tmp_file"
  if [ -n "$PLUGIN_PACKAGE_INSTALL_MODE" ]; then
    log::info "[$(timestamp)][package][$name] mode: $PLUGIN_PACKAGE_INSTALL_MODE"
  fi

  # prepare context
  cd $tmp_dir

  # download
  log::info "[$(timestamp)][package][$name] downloading ..."
  os::download $tmp_file $url
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][package][$name] failed to download from $url ."
    return 1
  fi

  # # extract
  # log::info "[$(timestamp)][package][$name] extracting ..."
  # os::extract $tmp_file

  # # install
  # log::info "[$(timestamp)][package][$name] installing ..."
  # os::install $source_bin_file $usr_bin_dir $name

  # template os
  case $os in
  ubuntu)
    pm install -y gdebi-core
    sudo gdebi -n $tmp_file
    ;;
  centos)
    sudo yum localinstall -y $tmp_file
    ;;
  *)
    log::error "[$(timestamp)] unsupport os: $os ($(uname -m))"
    return 1
    ;;
  esac

  if [ "$PLUGIN_PACKAGE_INSTALL_MODE" != "test" ]; then
    # clean
    log::info "[$(timestamp)][package][$name] cleaning ..."
    rm -rf $tmp_dir
  fi
}

export -f install
